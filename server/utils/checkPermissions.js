var authorization = require('../authorization');
//TODO: handle edge case of root
module.exports = function(options) {
  //if no path, return null
  if (!options || !options.path) {
    return null;
  }

  var path = options.path;
  var rules = options.rules || authorization;
  //set these to empty objects so an error wont be triggered when checking if they have properties
  var $user = options.user || {};
  var $data = options.data || {};

  //get array of keys
  path = path.split("/");
  path = path.slice(1, path.length-1);

  //initialize to whatever rules are set at root
  var read = rules[".read"];
  var write = rules[".write"];
  //find the rules for the specified path in the rules object
  for (var i = 0; i < path.length; i++) {
    /*handles case where path contains an id generated by the database - retinkdb ids are 36 characters long
    and contains 4 "-". Could have used a regular expression to count -, but apparently this way is faster*/
    if (path[i].length === 36 && path[i].split("-").length - 1 === 4) {
      var wildCardFound = false;
      var wildCard;
      //iterate through keys and see if a wildcard is defined
      for (var key in rules) {
        if (key[0] === "$") {
          wildCardFound = true;
          wildCard = key;
        }
      }
      //keeps track of the most relevant rule for both read and write as it descends further
      if (wildCardFound) {
        if (rules[wildCard][".read"]) {
          read = rules[wildCard][".read"];
        }
        if (rules[wildCard][".write"]) {
          write = rules[wildCard][".write"];
        }
        rules = rules[wildCard];
      }
    }
    else if (rules[path[i]]) {
      //keeps track of the most relevant rule for both read and write as it descends further
      if (rules[path[i]][".read"]) {
        read = rules[path[i]][".read"];
      }
      if (rules[path[i]][".write"]) {
        write = rules[path[i]][".write"];
      }
      rules = rules[path[i]];
    }
    //if key doesn't exist stop iterating and use the rules of the highest parent that has rules
    else {
      break;
    }
  }

//replace tokens with their actual values and evaluate the strings as javascript
if (read) {
  read = eval(read); 
}
if (write) {
  write = eval(write);
}
  //if rule is undefined, set it to true
  return {
    "read": read !== undefined ? read : false,
    "write": write !== undefined ? write : false
  }
}